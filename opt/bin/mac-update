#!/usr/bin/env bash
set -u

if [ "$(uname)" != "Darwin" ]; then
  echo "Exiting macOS update script because not on macOS"
  exit 2
fi

xcode-select --install >/dev/null 2>&1
exit_status=$?
if [ $exit_status -ne 1 ]; then
  echo "Try again once Xcode CLI tools are installed."
  exit 1
fi

if [ -e "$HOME/.nvm/nvm.sh" ]; then
  echo "nvm is installed and will be deactivated in this shell."
  echo "This ensures that system-level node, installed directly by homebrew, is used to install/update packages globally."
  # shellcheck disable=SC2162
  read -p "Press [Enter] to continue..."
  # shellcheck disable=SC1091
  . "$HOME/.nvm/nvm.sh"
  echo "+ npm deactivate"
  nvm deactivate
  echo "+ which node"
  which node
  echo "+ which npm"
  which npm
  echo ""
fi

echo "Homebrew ..."
brew update
brew upgrade --greedy

echo ""
echo "Mac App Store ..."
bash -c "mas upgrade"

set -e

echo ""
echo "SSH config ..."
pushd "$HOME/.ssh" >/dev/null
if [[ $(git status --porcelain) ]]; then
  echo "[!] skipping due to dirty working tree:"
  git status
else
  git pull --rebase
  ./fix-permissions.sh
fi
popd >/dev/null

echo ""
echo "dotfiles ..."
pushd "$HOME/.dotfiles" >/dev/null
if [[ $(git status --porcelain) ]]; then
  echo "[!] skipping due to dirty working tree:"
  git status
else
  git pull --rebase
  git sub update
  terminal-notifier -message "Attention required." -title "mac-update"
  ./mac/software-install.sh
  echo ""
  terminal-notifier -message "Attention required." -title "mac-update"
  echo "Run post-install software configuration script? (y/N)"
  read -r response
  if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
    ./mac/configure-post-software-install.sh
  fi
  ./mac/home-applications.sh
  ./macos-automation/script/restore-resources.sh
  env FORCE=true ./macos-automation/script/install.sh
fi
popd >/dev/null

echo ""
echo "Sublime Text config ..."
pushd "$HOME/.config/sublimetext" >/dev/null
if [[ $(git status --porcelain) ]]; then
  echo "[!] skipping due to dirty working tree:"
  git status
else
  git pull --rebase
fi
popd >/dev/null

if command -v npm >/dev/null; then
  echo ""
  echo "npm -g ..."
  npm update -g
fi

if command -v gcloud >/dev/null; then
  set +e
  echo ""
  echo "gcloud ..."
  gcloud components update
  set -e
fi

if command -v tldr >/dev/null; then
  set +e
  echo ""
  echo "tldr (tealdeer) cache ..."
  tldr --update
  set -e
fi

echo ""
echo "brew cleanup ..."
brew cleanup

terminal-notifier -message "Attention required." -title "mac-update"
echo ""
echo "Run \`brew doctor\`? (y/N)"
read -r response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
  set +e
  brew doctor
  set -e
fi

terminal-notifier -message "Attention required." -title "mac-update"
echo ""
echo "Run \`docker system prune -a\`? (y/N)"
echo "(note -a: remove all unused images not just dangling ones;"
echo " decline to be asked about system prune without -a)"
read -r response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
  set +e
  docker system prune -a
  set -e
else
  echo "Run \`docker system prune\`? (y/N)"
  read -r response
  if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
    set +e
    docker system prune
    set -e
  fi
fi
